

1. 

'\n' --> newline
'\t' --> tab

2.

r'\n' --> two different characters, '\' and '\n'.
The r'' is technically called a raw string.

3.

>>> re.match('\n', astr)
uphere (In a regular expression pattern) 
'\n' will always mean a newline, even if we add r'\n'.

4.

re.match('\n', '\n\n') will give a match object but re.match('\n', r'\n\n') wont give anything
as the string is now a raw string with backslah and character 'n' while pattern is essentially a newline
whether we apply r'' or not.
